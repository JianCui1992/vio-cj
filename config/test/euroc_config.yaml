%YAML:1.0



#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 1280
image_height: 720
distortion_parameters:
   k1: -0.05620386
   k2: -0.01322927
   p1: -0.00034181
   p2: 0.00058843
projection_parameters:
   fx: 793.88823403
   fy: 792.52058410
   cx: 604.36116913
   cy: 374.73307786

#distortion_parameters:
#   k1: -2.917e-01
#   k2: 8.228e-02
#   p1: 5.333e-05
#   p2: -1.578e-04 
#projection_parameters:
#   fx: 4.616e+02
#   fy: 4.603e+02
#   cx: 3.630e+02
#   cy: 2.481e+02

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 9.9871196871443468e-01, 2.8558576171274851e-02,
       -4.1938183956955977e-02, 4.2538368250040336e-02,
       -2.0742840378161098e-02, 9.9887948312079666e-01,
       2.7656658749059829e-02, -9.9937687700892675e-01,
       -2.1930958180673032e-02 ]
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ 4.4940502704758800e-02, 8.3498950824823870e-01,
       8.8960671312008011e-01 ]
#extrinsicRotation: !!opencv-matrix
#   rows: 3
#   cols: 3
#   dt: d
#   data: [0.997617, -0.032958, 0.0606143, 
#           -0.0613903, -0.0230665, 0.997847, 
#           -0.0314889, -0.999191, -0.0250348]
#extrinsicRotation: !!opencv-matrix
#   rows: 3
#   cols: 3
#   dt: d
#   data: [0, -1, 0, 
#           1, 0, 0, 
#           0, 0, 1]
#Translation from camera frame to imu frame, imu^T_cam
#extrinsicTranslation: !!opencv-matrix
#   rows: 3
#   cols: 1
#   dt: d
#   data: [-0.02,-0.06, 0.01]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 15                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.08           # accelerometer measurement noise standard deviation. #0.2   0.15
gyr_n: 0.001         # gyroscope measurement noise standard deviation.     #0.05   0.002
acc_w: 0.00004         # accelerometer bias random work noise standard deviation.  #0.02   0.0001
gyr_w: 2.0e-6       # gyroscope bias random work noise standard deviation.     #4.0e-5    2.0e-5
g_norm: 9.81007     # gravity magnitude

#loop closure parameters
loop_closure: 0                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
# pose_graph_save_path: "/home/jingkel/vins_path/vins_save_path/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0125                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 3.0      # size of camera marker in RVIZ


image_path: /home/jianc/dataset/vio/imgdir/
imu_path: /home/jianc/dataset/vio/listdir/imulist_radmin.txt
